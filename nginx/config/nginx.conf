user www-data;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
error_log /xlogs/nginx.error.log warn;
pid /var/run/nginx.pid;

events {
	worker_connections 1024;
	multi_accept on;
	use epoll;
}

http {
	server_names_hash_bucket_size 64;

	# You are going to want to resolve the real IPs from the networks docker 
	# creates, as well as other private ranges.
	set_real_ip_from 127.0.0.1;
	set_real_ip_from 10.0.0.0/8;
	set_real_ip_from 172.16.0.0/12;
	set_real_ip_from 192.168.0.0/16;
	real_ip_header X-Forwarded-For;
	real_ip_recursive on;

	# Include all custom settings
	include /etc/nginx/mime.types;
	include /etc/nginx/proxy.conf;
	include /etc/nginx/ssl.conf;
	include /etc/nginx/header.conf;
	include /etc/nginx/optimization.conf;
	default_type application/octet-stream;

	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
	'$status $body_bytes_sent "$http_referer" '
	'"$http_user_agent" "$http_x_forwarded_for" '
	'"$host" sn="$server_name" '
	'rt=$request_time '
	'ua="$upstream_addr" us="$upstream_status" '
	'ut="$upstream_response_time" ul="$upstream_response_length" '
	'cs=$upstream_cache_status' ;
	access_log /var/log/nginx/access.log main;
	access_log /xlogs/nginx.access.log main;

	sendfile on;
	send_timeout 3600;

	tcp_nopush on;
	tcp_nodelay on;

	open_file_cache max=500 inactive=10m;
	open_file_cache_errors on;
	keepalive_timeout 65;
	reset_timedout_connection on;
	server_tokens off;

	# Use Docker's embedded DNS
	resolver 127.0.0.11;
	resolver_timeout 10s;

	# Include additional custom configuration files
	include /etc/nginx/conf.d/*.conf;
}
